version: 0.2

env:
  variables:
    REPOSITORY_URI: 971422700488.dkr.ecr.us-east-1.amazonaws.com/myrepo1
    IMAGE_TAG: latest

phases:
  install:
    commands:
      - echo "Installing Java 17..."
      - yum install -y java-17-amazon-corretto-devel
      - export JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto
      - export PATH=$JAVA_HOME/bin:$PATH
      - java -version  # Verify Java 17 is installed

  pre_build:
    commands:
      - echo "Cleaning the Maven cache..."
      - mvn dependency:purge-local-repository
      - echo "Building the Maven project..."
      - mvn clean install -DskipTests -X  # Verbose logging
      - echo "Checking if the JAR file exists in the target/ directory..."
      - ls -al target/  # List contents of the target directory
      - if [ ! -f target/course-service.jar ]; then echo "JAR file not found!" && exit 1; fi
      - echo "Logging in to Amazon ECR..."
      - aws --version
      - $(aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPOSITORY_URI)
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')

  build:
    commands:
      - echo "Build started on `date`"
      - docker build --progress=plain -t $REPOSITORY_URI:latest .  # Build Docker image with the latest tag
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo "Build completed on `date`"
      - echo "Pushing the Docker images..."
      - docker push $REPOSITORY_URI:latest  # Push latest image to ECR
      - docker push $REPOSITORY_URI:$IMAGE_TAG  # Push the build-specific image
      - echo "Writing image definitions file..."
      - printf '[{"name":"course-service","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo "Displaying image definitions file..."
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - target/course-service.jar
